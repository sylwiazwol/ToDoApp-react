{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handelText","e","_this","setState","target","value","handelCheckbox","handleDate","handleClick","_this$state","length","props","add","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","console","log","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33432fd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n\r\n  minDate = new Date().toISOString().slice(0,10);\r\n  state ={\r\n      text: '',\r\n      checked: false,\r\n      date: new Date().toISOString().slice(0,10) //potrzebujemy tylko daty, dlatego trzeba odciąć pozostałe wartości; domyslne ustawienie daty\r\n  }\r\n\r\n  handelText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  handelCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  } //wybór daty\r\n\r\n  handleClick = () =>{\r\n\r\n    const {text, checked, date} = this.state\r\n    if(text.length>2){\r\n    const add = this.props.add(text, date, checked)\r\n    if(add){\r\n      this.setState({\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n      })\r\n    } //czyszczenie pól formularza\r\n  }\r\n}\r\n  render() {\r\n    \r\n    let maxDate = this.minDate.slice(0,4)*1 + 1; //mnożenie zamieni string na number\r\n    maxDate = maxDate + \"-12-31\" //daje datę: 2020-12-31\r\n    return (\r\n      <div className=\"form\">\r\n          <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handelText}></input>\r\n          <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handelCheckbox}/>\r\n          <label htmlFor=\"important\">Priorytet</label><br/>\r\n          <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n          <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}/><br/>\r\n          <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n  const styles = {\r\n    color: \"red\",\r\n  }\r\n\r\n  const {text, date, id, active, important, finishDate} = props.task; //destrukturyzacja\r\n\r\n  if(active) {\r\n  return ( \r\n    <div>\r\n      <p>\r\n        <strong style={important ? styles : null}>{text}</strong> - do <span>{date} </span> {/* przypisanie koloru do zadań priorytetowych */}\r\n        <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n        <button onClick={() => props.delete(id)}>X</button>\r\n      </p>\r\n\r\n    </div>\r\n   );\r\n  } else{\r\n    const finish = new Date(finishDate).toLocaleString() //wyodrębnienie daty\r\n     return(\r\n       <div>\r\n         <p>\r\n        <strong>{text}</strong><em> ( zrobić do {date} )</em><br/>\r\n        -potwierdzenie wykonania <span>{finish}</span>\r\n        <button onClick={() => props.delete(id)}>X</button>\r\n      </p>\r\n       </div>\r\n     )\r\n   }\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  // done.sort((a,b) => b.finishDate - a.finishDate ) //nowy element będzie wyświetlany na górze listy, a stare zadania zrobione, bedą na końcu; kolejność zależy od indexu a i b ( =0, >0, <0)\r\n\r\n  if(done.length >= 2 ){\r\n  done.sort((a,b) => {\r\n    if(a.finishDate < b.finishDate){\r\n      return 1\r\n    }\r\n    if(a.finishDate > b.finishDate){\r\n      return -1\r\n    }\r\n    return 0 // gdy liczby są takie same\r\n  })\r\n  //ustalenie kolejności wyświetlania zadań zrobionych\r\n  }\r\n\r\n  if(active.length >= 2 ){\r\n    active.sort((a,b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase(); //warunek potrzebny do tego, żeby duże litery nie zmieniały kolejności\r\n\r\n      if(a < b) return -1;\r\n      if(a > b) return 1;\r\n      return 0;\r\n    })\r\n} //alfabetyczne ustawienie zadań na liście Zadań do zrobienia\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n\r\n  return ( \r\n    <>\r\n    <div className=\"active\">\r\n      <h1>zadania do zrobienia</h1>\r\n     {activeTasks.length > 0 ? activeTasks : <p>brak zadań</p>}\r\n    </div>\r\n\r\n    <hr/>\r\n\r\n    <div className=\"done\">\r\n      <h2>zadania zrobione <span>( {done.length} )</span></h2>\r\n      {doneTasks.slice(0,5)} {/*będzie wyświetlane tylko 5 elementów */}\r\n  {done.length > 5 && <span style={{fontSize: \"10px\"}}>wyświetlonych jest tylko 5 ostatnich zadań</span> }\r\n    </div>\r\n</>\r\n   );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n counter = 9\n  state = {\n    tasks: [\n      { id: 0, text: 'przeczytać książkę', date: '2019-09-12', important: true, active: true,finishDate: null\n      },\n      { id: 1, text: \"zrobić dobry uczynek\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 2, text: \"pomalować dom\", date: '2019-09-11', important: false, active: true, finishDate: null },\n      { id: 3, text: \"pójść na siłownię\", date: '2019-05-20', important: true, active: true, finishDate: null },\n      { id: 4, text: \"sprzedać stare książki\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 5, text: \"jeszcze raz pomalować dom\", date: '2019-09-11', important: false, active: true, finishDate: null },\n      { id: 6, text: \"fryzjer!!!\", date: '2019-05-20', important: true, active: true, finishDate: null },\n      { id: 7, text: \"odebrać paczkę\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 8, text: \"kupić mleko\", date: '2019-09-11', important: false, active: true, finishDate: null },\n    ]\n  }\n\n      \n  deleteTask = (id) => {\n    console.log(\"delete el o id\" + id);\n    // I sposób\n    // const tasks = [...this.state.tasks]; //kopia tablicy\n    // const index = tasks.findIndex(task => task.id === id); //sprawdza, czy id task jest równe id przekazanemu przez funkcję\n    // tasks.splice(index, 1); //usuwa ten 1 wskazany element\n    \n    // this.setState({\n    //   tasks //przekazanie nowej tablicy do starej\n    // })\n\n    // II sposób\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id) //ten element, który pasuje, nie zostanie przeniesiony do nowej tablicy\n    this.setState({\n      tasks \n    })\n  }\n\n  changeTaskStatus = (id) => {\n    console.log(\"change el o id\" + id);\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if(task.id === id){\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter, \n      text: text, //text z input \n      date: date,\n      important: important, \n      active: true, \n      finishDate: null\n    }\n    this.counter++\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task] //tworzymy nową tablice, którą przypisujemy do tasks; dodajemy nowe zadanie\n    }))\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ToDo App</h1>\n        <AddTask add={this.addTask}/>\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}